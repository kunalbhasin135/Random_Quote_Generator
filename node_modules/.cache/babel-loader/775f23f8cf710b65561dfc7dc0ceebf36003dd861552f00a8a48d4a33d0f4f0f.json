{"ast":null,"code":"var _jsxFileName = \"/Users/kunal/Desktop/quote-random/src/Components/Random-Quote/RandomQuote.jsx\";\nimport React, { useState } from 'react';\nimport './RandomQuote.css';\nimport twitter_icon from '../Assets/twitter-logo-2.svg';\nimport reload_icon from '../Assets/reload.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RandomQuote = () => {\n  let quotes = [];\n  async function loadQuotes() {\n    const response = await fetch(\"https://type.fit/api/quotes\");\n    quotes = await response.json();\n  }\n  const random = () => {\n    return quotes[Math.floor(Math.random() * quotes.length)];\n  };\n  const [quote, setQuote] = useState < quotes > random();\n  loadQuotes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quote\",\n      children: quote.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"author\",\n          children: [\" - \", quote.author.split(',')[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icons\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: reload_icon,\n            onClick: () => {\n              random();\n            },\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: twitter_icon,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = RandomQuote;\nvar _c;\n$RefreshReg$(_c, \"RandomQuote\");","map":{"version":3,"names":["React","useState","twitter_icon","reload_icon","jsxDEV","_jsxDEV","RandomQuote","quotes","loadQuotes","response","fetch","json","random","Math","floor","length","quote","setQuote","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","author","split","src","onClick","alt","_c","$RefreshReg$"],"sources":["/Users/kunal/Desktop/quote-random/src/Components/Random-Quote/RandomQuote.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport './RandomQuote.css'\nimport twitter_icon from '../Assets/twitter-logo-2.svg'\nimport reload_icon from '../Assets/reload.svg'\n\n\nexport const RandomQuote = () => {\n    let quotes = [];\n\n    async function loadQuotes(){\n        const response = await fetch(\"https://type.fit/api/quotes\");\n        quotes = await response.json();\n    }\n\n    const random = () =>{\n        return quotes[Math.floor(Math.random()*quotes.length)]\n        \n    }\n\n\n    const [quote,setQuote] = useState<quotes>(random());\n    \n    loadQuotes();\n\n  return (\n    <div className='container'>\n        <div className='quote'>{quote.text}</div>\n        <div>\n            <div className=\"line\"></div>\n            <div className=\"bottom\">\n                <div className=\"author\"> - {quote.author.split(',')[0]}</div>\n                <div className=\"icons\">\n                <img src={reload_icon} onClick={() => {random()}} alt=\"\" />\n                <img src={twitter_icon} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    </div>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,mBAAmB;AAC1B,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,WAAW,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG9C,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC7B,IAAIC,MAAM,GAAG,EAAE;EAEf,eAAeC,UAAUA,CAAA,EAAE;IACvB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3DH,MAAM,GAAG,MAAME,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClC;EAEA,MAAMC,MAAM,GAAGA,CAAA,KAAK;IAChB,OAAOL,MAAM,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC,CAAC,GAACL,MAAM,CAACQ,MAAM,CAAC,CAAC;EAE1D,CAAC;EAGD,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGhB,QAAQ,GAACM,MAAM,GAAEK,MAAM,CAAC,CAAE;EAEnDJ,UAAU,CAAC,CAAC;EAEd,oBACEH,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBd,OAAA;MAAKa,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEH,KAAK,CAACI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzCnB,OAAA;MAAAc,QAAA,gBACId,OAAA;QAAKa,SAAS,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC5BnB,OAAA;QAAKa,SAAS,EAAC,QAAQ;QAAAC,QAAA,gBACnBd,OAAA;UAAKa,SAAS,EAAC,QAAQ;UAAAC,QAAA,GAAC,KAAG,EAACH,KAAK,CAACS,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7DnB,OAAA;UAAKa,SAAS,EAAC,OAAO;UAAAC,QAAA,gBACtBd,OAAA;YAAKsB,GAAG,EAAExB,WAAY;YAACyB,OAAO,EAAEA,CAAA,KAAM;cAAChB,MAAM,CAAC,CAAC;YAAA,CAAE;YAACiB,GAAG,EAAC;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC3DnB,OAAA;YAAKsB,GAAG,EAAEzB,YAAa;YAAC2B,GAAG,EAAC;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAM,EAAA,GAjCYxB,WAAW;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}